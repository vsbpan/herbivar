% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Neutral_model_ML_support.R
\name{allometry.herb.quasi.sim}
\alias{allometry.herb.quasi.sim}
\title{Generate Neutral Herbivory Distribution Based On Allometry Scaling Laws Using Simulation}
\usage{
allometry.herb.quasi.sim(
  mean.phi.T,
  min.phi = 0.005,
  max.phi = 1,
  a = 14/9,
  n.sim = 1000,
  truncate = T
)
}
\arguments{
\item{mean.phi.T}{The mean herbivory of the distribution when herbivores are not plant limited. See details.}

\item{min.phi}{the minimum bite size in terms of proportion leaf herbivory. Defaults to 0.005 (0.5\%).}

\item{max.phi}{the maximum bite size in terms of proportion leaf herbivory Defaults to 1 (100\%).}

\item{a}{the combined allometry scaling coefficient. Defaults to 14/9.}

\item{n.sim}{the number of random numbers to draw.}

\item{truncate}{if \code{TRUE} (default), truncate generated values of \eqn{\phi_T} to \eqn{[0, 1]}.}
}
\value{
a vector of numeric values
}
\description{
This is the workhorse of \code{ralloT()} that generate draws from the neutral herbivory distribution using simulation. The CDF of the neutral herbivory model is too computationally intensive to calculate, so inverse transform sampling is not implemented.
}
\details{
\eqn{\lambda} of a Poisson distribution is calculated from parameters \eqn{\phi_m}, \eqn{\phi_M}, \eqn{a}, and \eqn{\overline{\phi_{T}'}} and used to draw random number of feeding events on a leaf \eqn{k_i}. \deqn{\lambda = \frac{\overline{\phi_{T}'}}{\overline{\phi}}}
\eqn{\phi_{Ti}} is then obtained via \deqn{\phi_{Ti} = \sum^{k_i}_{j=1} \phi_j} if \eqn{\phi_{Ti} \leq 1}, otherwise \deqn{\phi_{Ti} = 1,} where \deqn{P(\phi) = \frac{1-\alpha}{\phi_M^{1-\alpha} - \phi_m^{1-\alpha}} \phi^{1-\alpha}}
\eqn{\overline{\phi_{T}'}} is the mean herbivory of the distribution when herbivores are not plant limited. That is, if \eqn{\overline{\phi_{T}}}, which has support \eqn{[x, \infty]}, is not truncated to \eqn{[0, 1]}. \eqn{\overline{\phi_{T}}} and \eqn{\overline{\phi_{T}'}} are often close to each other. For more details on the 'bite size' distribution see \code{?rallo()}.
}
