% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/misc.R
\name{get_biplot}
\alias{get_biplot}
\title{Get Biplot or Triplot}
\usage{
get_biplot(
  x,
  choices = c(1, 2),
  scaling = 2,
  display = c("sites", "species", "biplot", "centroids"),
  ellipse = NA,
  group = NULL,
  group2 = NULL,
  sites_alpha = 1,
  site_size = 2,
  species_color = "violetred",
  species_alpha = 1
)
}
\arguments{
\item{x}{an object that is supported by \code{vegan::scores()}}

\item{choices}{a vector of length 2 defining the axes to plot}

\item{scaling}{scaling argument passed to \code{vegan::scores()}}

\item{display}{a vector of characters defining what to plot}

\item{ellipse}{a character string passed to the \code{type} argument of \code{ggplot2::stat_ellipse()}. If \code{NA}, no ellipse is plotted.}

\item{group}{a vector in the same length and order as the sites data used to fit the model that is used to color the site points}

\item{group2}{a vector in the same length and order as the sites data used to fit the model that is used to determine the shape of the site points}

\item{sites_alpha}{the transparency of the sites plotted as points}

\item{site_size}{the size pf the site points}

\item{species_color}{the color of the species labels}

\item{species_alpha}{the transparency of the species plotted as text}
}
\value{
a ggplot object
}
\description{
Generate biplot or triplot using ggplot2.
}
\examples{

# Simulate some data
probed.data <- do.call("rbind", lapply(1:3,
function(z){
bind_vec(lapply(seq_len(100),
function(i){
x <- rpois(n = 1000, lambda = z)
c(probe_dist(x), "z" = z)
}))
}))
std_probes <- scale(probed.data[,-which(names(probed.data) \%in\% c("z","N","min"))])
probed.data$z <- as.factor(probed.data$z)

# Fit a simple RDA model
m <- vegan::rda(std_probes ~ z, data = probed.data)

get_biplot(m, group = probed.data$z) # Triplot

# The function returns a ggplot object, so you can modify the plot as you would normally with ggplot()
get_biplot(m, group = probed.data$z) + ggplot2::labs(color = "z") # Change color label

get_biplot(m, group = probed.data$z, ellipse = "t") + ggplot2::scale_color_brewer(type = "qual")

}
